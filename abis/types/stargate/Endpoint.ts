/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface EndpointInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BLOCK_VERSION"
      | "DEFAULT_VERSION"
      | "chainId"
      | "defaultReceiveLibraryAddress"
      | "defaultReceiveVersion"
      | "defaultSendLibrary"
      | "defaultSendVersion"
      | "estimateFees"
      | "forceResumeReceive"
      | "getChainId"
      | "getConfig"
      | "getInboundNonce"
      | "getOutboundNonce"
      | "getReceiveLibraryAddress"
      | "getReceiveVersion"
      | "getSendLibraryAddress"
      | "getSendVersion"
      | "hasStoredPayload"
      | "inboundNonce"
      | "isReceivingPayload"
      | "isSendingPayload"
      | "latestVersion"
      | "libraryLookup"
      | "newVersion"
      | "outboundNonce"
      | "owner"
      | "receivePayload"
      | "renounceOwnership"
      | "retryPayload"
      | "send"
      | "setConfig"
      | "setDefaultReceiveVersion"
      | "setDefaultSendVersion"
      | "setReceiveVersion"
      | "setSendVersion"
      | "storedPayload"
      | "transferOwnership"
      | "uaConfigLookup"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DefaultReceiveVersionSet"
      | "DefaultSendVersionSet"
      | "NewLibraryVersionAdded"
      | "OwnershipTransferred"
      | "PayloadCleared"
      | "PayloadStored"
      | "UaForceResumeReceive"
      | "UaReceiveVersionSet"
      | "UaSendVersionSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BLOCK_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "defaultReceiveLibraryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultReceiveVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultSendLibrary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultSendVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimateFees",
    values: [BigNumberish, AddressLike, BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forceResumeReceive",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConfig",
    values: [BigNumberish, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInboundNonce",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutboundNonce",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceiveLibraryAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceiveVersion",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSendLibraryAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSendVersion",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasStoredPayload",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "inboundNonce",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isReceivingPayload",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isSendingPayload",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "libraryLookup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newVersion",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "outboundNonce",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receivePayload",
    values: [
      BigNumberish,
      BytesLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retryPayload",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "send",
    values: [
      BigNumberish,
      BytesLike,
      BytesLike,
      AddressLike,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultReceiveVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultSendVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReceiveVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSendVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storedPayload",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uaConfigLookup",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BLOCK_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultReceiveLibraryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultReceiveVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultSendLibrary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultSendVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceResumeReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInboundNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutboundNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReceiveLibraryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReceiveVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSendLibraryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSendVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasStoredPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inboundNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReceivingPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSendingPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "libraryLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "outboundNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receivePayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retryPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "send", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultReceiveVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultSendVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReceiveVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSendVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedPayload",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uaConfigLookup",
    data: BytesLike
  ): Result;
}

export namespace DefaultReceiveVersionSetEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultSendVersionSetEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewLibraryVersionAddedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayloadClearedEvent {
  export type InputTuple = [
    srcChainId: BigNumberish,
    srcAddress: BytesLike,
    nonce: BigNumberish,
    dstAddress: AddressLike
  ];
  export type OutputTuple = [
    srcChainId: bigint,
    srcAddress: string,
    nonce: bigint,
    dstAddress: string
  ];
  export interface OutputObject {
    srcChainId: bigint;
    srcAddress: string;
    nonce: bigint;
    dstAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PayloadStoredEvent {
  export type InputTuple = [
    srcChainId: BigNumberish,
    srcAddress: BytesLike,
    dstAddress: AddressLike,
    nonce: BigNumberish,
    payload: BytesLike,
    reason: BytesLike
  ];
  export type OutputTuple = [
    srcChainId: bigint,
    srcAddress: string,
    dstAddress: string,
    nonce: bigint,
    payload: string,
    reason: string
  ];
  export interface OutputObject {
    srcChainId: bigint;
    srcAddress: string;
    dstAddress: string;
    nonce: bigint;
    payload: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UaForceResumeReceiveEvent {
  export type InputTuple = [chainId: BigNumberish, srcAddress: BytesLike];
  export type OutputTuple = [chainId: bigint, srcAddress: string];
  export interface OutputObject {
    chainId: bigint;
    srcAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UaReceiveVersionSetEvent {
  export type InputTuple = [ua: AddressLike, version: BigNumberish];
  export type OutputTuple = [ua: string, version: bigint];
  export interface OutputObject {
    ua: string;
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UaSendVersionSetEvent {
  export type InputTuple = [ua: AddressLike, version: BigNumberish];
  export type OutputTuple = [ua: string, version: bigint];
  export interface OutputObject {
    ua: string;
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Endpoint extends BaseContract {
  connect(runner?: ContractRunner | null): Endpoint;
  waitForDeployment(): Promise<this>;

  interface: EndpointInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BLOCK_VERSION: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_VERSION: TypedContractMethod<[], [bigint], "view">;

  chainId: TypedContractMethod<[], [bigint], "view">;

  defaultReceiveLibraryAddress: TypedContractMethod<[], [string], "view">;

  defaultReceiveVersion: TypedContractMethod<[], [bigint], "view">;

  defaultSendLibrary: TypedContractMethod<[], [string], "view">;

  defaultSendVersion: TypedContractMethod<[], [bigint], "view">;

  estimateFees: TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _userApplication: AddressLike,
      _payload: BytesLike,
      _payInZRO: boolean,
      _adapterParams: BytesLike
    ],
    [[bigint, bigint] & { nativeFee: bigint; zroFee: bigint }],
    "view"
  >;

  forceResumeReceive: TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  getChainId: TypedContractMethod<[], [bigint], "view">;

  getConfig: TypedContractMethod<
    [
      _version: BigNumberish,
      _chainId: BigNumberish,
      _userApplication: AddressLike,
      _configType: BigNumberish
    ],
    [string],
    "view"
  >;

  getInboundNonce: TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [bigint],
    "view"
  >;

  getOutboundNonce: TypedContractMethod<
    [_dstChainId: BigNumberish, _srcAddress: AddressLike],
    [bigint],
    "view"
  >;

  getReceiveLibraryAddress: TypedContractMethod<
    [_userApplication: AddressLike],
    [string],
    "view"
  >;

  getReceiveVersion: TypedContractMethod<
    [_userApplication: AddressLike],
    [bigint],
    "view"
  >;

  getSendLibraryAddress: TypedContractMethod<
    [_userApplication: AddressLike],
    [string],
    "view"
  >;

  getSendVersion: TypedContractMethod<
    [_userApplication: AddressLike],
    [bigint],
    "view"
  >;

  hasStoredPayload: TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [boolean],
    "view"
  >;

  inboundNonce: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [bigint],
    "view"
  >;

  isReceivingPayload: TypedContractMethod<[], [boolean], "view">;

  isSendingPayload: TypedContractMethod<[], [boolean], "view">;

  latestVersion: TypedContractMethod<[], [bigint], "view">;

  libraryLookup: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  newVersion: TypedContractMethod<
    [_newLayerZeroLibraryAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  outboundNonce: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  receivePayload: TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _dstAddress: AddressLike,
      _nonce: BigNumberish,
      _gasLimit: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  retryPayload: TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike, _payload: BytesLike],
    [void],
    "nonpayable"
  >;

  send: TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _destination: BytesLike,
      _payload: BytesLike,
      _refundAddress: AddressLike,
      _zroPaymentAddress: AddressLike,
      _adapterParams: BytesLike
    ],
    [void],
    "payable"
  >;

  setConfig: TypedContractMethod<
    [
      _version: BigNumberish,
      _chainId: BigNumberish,
      _configType: BigNumberish,
      _config: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setDefaultReceiveVersion: TypedContractMethod<
    [_newDefaultReceiveVersion: BigNumberish],
    [void],
    "nonpayable"
  >;

  setDefaultSendVersion: TypedContractMethod<
    [_newDefaultSendVersion: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReceiveVersion: TypedContractMethod<
    [_newVersion: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSendVersion: TypedContractMethod<
    [_newVersion: BigNumberish],
    [void],
    "nonpayable"
  >;

  storedPayload: TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [
      [bigint, string, string] & {
        payloadLength: bigint;
        dstAddress: string;
        payloadHash: string;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uaConfigLookup: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, string, string] & {
        sendVersion: bigint;
        receiveVersion: bigint;
        receiveLibraryAddress: string;
        sendLibrary: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BLOCK_VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_VERSION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "chainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultReceiveLibraryAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "defaultReceiveVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultSendLibrary"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "defaultSendVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "estimateFees"
  ): TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _userApplication: AddressLike,
      _payload: BytesLike,
      _payInZRO: boolean,
      _adapterParams: BytesLike
    ],
    [[bigint, bigint] & { nativeFee: bigint; zroFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "forceResumeReceive"
  ): TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getChainId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getConfig"
  ): TypedContractMethod<
    [
      _version: BigNumberish,
      _chainId: BigNumberish,
      _userApplication: AddressLike,
      _configType: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInboundNonce"
  ): TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOutboundNonce"
  ): TypedContractMethod<
    [_dstChainId: BigNumberish, _srcAddress: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReceiveLibraryAddress"
  ): TypedContractMethod<[_userApplication: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getReceiveVersion"
  ): TypedContractMethod<[_userApplication: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSendLibraryAddress"
  ): TypedContractMethod<[_userApplication: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getSendVersion"
  ): TypedContractMethod<[_userApplication: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasStoredPayload"
  ): TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "inboundNonce"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isReceivingPayload"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isSendingPayload"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "latestVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "libraryLookup"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "newVersion"
  ): TypedContractMethod<
    [_newLayerZeroLibraryAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "outboundNonce"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receivePayload"
  ): TypedContractMethod<
    [
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _dstAddress: AddressLike,
      _nonce: BigNumberish,
      _gasLimit: BigNumberish,
      _payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "retryPayload"
  ): TypedContractMethod<
    [_srcChainId: BigNumberish, _srcAddress: BytesLike, _payload: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "send"
  ): TypedContractMethod<
    [
      _dstChainId: BigNumberish,
      _destination: BytesLike,
      _payload: BytesLike,
      _refundAddress: AddressLike,
      _zroPaymentAddress: AddressLike,
      _adapterParams: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setConfig"
  ): TypedContractMethod<
    [
      _version: BigNumberish,
      _chainId: BigNumberish,
      _configType: BigNumberish,
      _config: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultReceiveVersion"
  ): TypedContractMethod<
    [_newDefaultReceiveVersion: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultSendVersion"
  ): TypedContractMethod<
    [_newDefaultSendVersion: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReceiveVersion"
  ): TypedContractMethod<[_newVersion: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSendVersion"
  ): TypedContractMethod<[_newVersion: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "storedPayload"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BytesLike],
    [
      [bigint, string, string] & {
        payloadLength: bigint;
        dstAddress: string;
        payloadHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uaConfigLookup"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, string, string] & {
        sendVersion: bigint;
        receiveVersion: bigint;
        receiveLibraryAddress: string;
        sendLibrary: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "DefaultReceiveVersionSet"
  ): TypedContractEvent<
    DefaultReceiveVersionSetEvent.InputTuple,
    DefaultReceiveVersionSetEvent.OutputTuple,
    DefaultReceiveVersionSetEvent.OutputObject
  >;
  getEvent(
    key: "DefaultSendVersionSet"
  ): TypedContractEvent<
    DefaultSendVersionSetEvent.InputTuple,
    DefaultSendVersionSetEvent.OutputTuple,
    DefaultSendVersionSetEvent.OutputObject
  >;
  getEvent(
    key: "NewLibraryVersionAdded"
  ): TypedContractEvent<
    NewLibraryVersionAddedEvent.InputTuple,
    NewLibraryVersionAddedEvent.OutputTuple,
    NewLibraryVersionAddedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PayloadCleared"
  ): TypedContractEvent<
    PayloadClearedEvent.InputTuple,
    PayloadClearedEvent.OutputTuple,
    PayloadClearedEvent.OutputObject
  >;
  getEvent(
    key: "PayloadStored"
  ): TypedContractEvent<
    PayloadStoredEvent.InputTuple,
    PayloadStoredEvent.OutputTuple,
    PayloadStoredEvent.OutputObject
  >;
  getEvent(
    key: "UaForceResumeReceive"
  ): TypedContractEvent<
    UaForceResumeReceiveEvent.InputTuple,
    UaForceResumeReceiveEvent.OutputTuple,
    UaForceResumeReceiveEvent.OutputObject
  >;
  getEvent(
    key: "UaReceiveVersionSet"
  ): TypedContractEvent<
    UaReceiveVersionSetEvent.InputTuple,
    UaReceiveVersionSetEvent.OutputTuple,
    UaReceiveVersionSetEvent.OutputObject
  >;
  getEvent(
    key: "UaSendVersionSet"
  ): TypedContractEvent<
    UaSendVersionSetEvent.InputTuple,
    UaSendVersionSetEvent.OutputTuple,
    UaSendVersionSetEvent.OutputObject
  >;

  filters: {
    "DefaultReceiveVersionSet(uint16)": TypedContractEvent<
      DefaultReceiveVersionSetEvent.InputTuple,
      DefaultReceiveVersionSetEvent.OutputTuple,
      DefaultReceiveVersionSetEvent.OutputObject
    >;
    DefaultReceiveVersionSet: TypedContractEvent<
      DefaultReceiveVersionSetEvent.InputTuple,
      DefaultReceiveVersionSetEvent.OutputTuple,
      DefaultReceiveVersionSetEvent.OutputObject
    >;

    "DefaultSendVersionSet(uint16)": TypedContractEvent<
      DefaultSendVersionSetEvent.InputTuple,
      DefaultSendVersionSetEvent.OutputTuple,
      DefaultSendVersionSetEvent.OutputObject
    >;
    DefaultSendVersionSet: TypedContractEvent<
      DefaultSendVersionSetEvent.InputTuple,
      DefaultSendVersionSetEvent.OutputTuple,
      DefaultSendVersionSetEvent.OutputObject
    >;

    "NewLibraryVersionAdded(uint16)": TypedContractEvent<
      NewLibraryVersionAddedEvent.InputTuple,
      NewLibraryVersionAddedEvent.OutputTuple,
      NewLibraryVersionAddedEvent.OutputObject
    >;
    NewLibraryVersionAdded: TypedContractEvent<
      NewLibraryVersionAddedEvent.InputTuple,
      NewLibraryVersionAddedEvent.OutputTuple,
      NewLibraryVersionAddedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PayloadCleared(uint16,bytes,uint64,address)": TypedContractEvent<
      PayloadClearedEvent.InputTuple,
      PayloadClearedEvent.OutputTuple,
      PayloadClearedEvent.OutputObject
    >;
    PayloadCleared: TypedContractEvent<
      PayloadClearedEvent.InputTuple,
      PayloadClearedEvent.OutputTuple,
      PayloadClearedEvent.OutputObject
    >;

    "PayloadStored(uint16,bytes,address,uint64,bytes,bytes)": TypedContractEvent<
      PayloadStoredEvent.InputTuple,
      PayloadStoredEvent.OutputTuple,
      PayloadStoredEvent.OutputObject
    >;
    PayloadStored: TypedContractEvent<
      PayloadStoredEvent.InputTuple,
      PayloadStoredEvent.OutputTuple,
      PayloadStoredEvent.OutputObject
    >;

    "UaForceResumeReceive(uint16,bytes)": TypedContractEvent<
      UaForceResumeReceiveEvent.InputTuple,
      UaForceResumeReceiveEvent.OutputTuple,
      UaForceResumeReceiveEvent.OutputObject
    >;
    UaForceResumeReceive: TypedContractEvent<
      UaForceResumeReceiveEvent.InputTuple,
      UaForceResumeReceiveEvent.OutputTuple,
      UaForceResumeReceiveEvent.OutputObject
    >;

    "UaReceiveVersionSet(address,uint16)": TypedContractEvent<
      UaReceiveVersionSetEvent.InputTuple,
      UaReceiveVersionSetEvent.OutputTuple,
      UaReceiveVersionSetEvent.OutputObject
    >;
    UaReceiveVersionSet: TypedContractEvent<
      UaReceiveVersionSetEvent.InputTuple,
      UaReceiveVersionSetEvent.OutputTuple,
      UaReceiveVersionSetEvent.OutputObject
    >;

    "UaSendVersionSet(address,uint16)": TypedContractEvent<
      UaSendVersionSetEvent.InputTuple,
      UaSendVersionSetEvent.OutputTuple,
      UaSendVersionSetEvent.OutputObject
    >;
    UaSendVersionSet: TypedContractEvent<
      UaSendVersionSetEvent.InputTuple,
      UaSendVersionSetEvent.OutputTuple,
      UaSendVersionSetEvent.OutputObject
    >;
  };
}
